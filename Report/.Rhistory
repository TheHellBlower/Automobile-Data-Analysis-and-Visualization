lang
strsplit(lang,"[")
strsplit(lang,"Hindi")
lang
strsplit(lang,'2')
strsplit(lang,'2')[[1]]
lang[2] = "Hindi"
lang[4] = "Hindi"
lang[9] = "Hindi"
lang[14] = "Hindi"
lang[5] = "English"
lang
tab$Primarylanguage <- lang
tab <- tab %>% group_by(Primarylanguage)
tab["val" = '']
tab =tab["val" = '']
tab <- tab %>% group_by(Primarylanguage)
tab =tab %>% select(Link,Brandchannel,`Subscribers(millions)`,Primarylanguage,Category,Country)
tab <- tab %>% group_by(Primarylanguage)
tab%>% summarise(Category)
tab%>% summarise(Primarylanguage)
select(tab,Primarylanguage = "Hindi")
filter(tab,Primarylanguage = "Hindi")
filter(tab,Primarylanguage == "Hindi")
hindi <- filter(tab,Primarylanguage == "Hindi")
hindi
summarise(hindi, Category)
hindi<- group_by(hindi,Category)
summarise(hindi,n=n())
summarise(hindi,n=n(),Avg_subs = mean(Subscribers(millions)))
subs = hindi$`Subscribers(millions)`
summarise(hindi,n=n(),Avg_subs = mean(subs))
subs'
sub
subs
subset()
qss
subs
mean(subs)
rm(list=ls())
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
lang <- tab$Primarylanguage
lang[2] = "Hindi"
lang[4] = "Hindi"
lang[9] = "Hindi"
lang[14] = "Hindi"
lang[5] = "English"
tab$Primarylanguage <- lang
tab =tab %>% select(Link,Brandchannel,`Subscribers(millions)`,Primarylanguage,Category,Country)
hindi <- filter(tab,Primarylanguage == "Hindi")
hindi <- group_by(hindi, Category)
hindi["Subscribers(millions)"=="Sub"]
hindi
summarise(hindi,Category, n=n(), Ayg_sub = mean(`Subscribers(millions)`))
rename(hindi, Subs = `Subscribers(millions)`)
summarise_all(Category, n=n(), Avg_subs = mean(Subs))
summarise_all(hindi,Category, n=n(), Avg_subs = mean(Subs))
hindi <- group_by(hindi, Category)
summarise(hindi,Category, n=n(), Avg_subs = mean(Subs))
rename(hindi, Subs = `Subscribers(millions)`)
tab <- rename(hindi, Subs = `Subscribers(millions)`)
hindi <- group_by(hindi, Category)
tab <- as.tibble(tab)
tab <- as_tibble(tab)
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
tab <- as_tibble(tab)
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
lang <- tab$Primarylanguage
lang[2] = "Hindi"
lang[4] = "Hindi"
lang[9] = "Hindi"
lang[14] = "Hindi"
lang[5] = "English"
tab$Primarylanguage <- lang
tab =tab %>% select(Link,Brandchannel,`Subscribers(millions)`,Primarylanguage,Category,Country)
tab <- as_tibble(tab)
hindi <- filter(tab,Primarylanguage == "Hindi")
hindi <- group_by(hindi, Category)
tab <- rename(hindi, Subs = `Subscribers(millions)`)
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
tab <- rename(tab, Subs = `Subscribers(millions)`)
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
lang <- tab$Primarylanguage
lang[2] = "Hindi"
lang[4] = "Hindi"
lang[9] = "Hindi"
lang[14] = "Hindi"
lang[5] = "English"
tab$Primarylanguage <- lang
tab =tab %>% select(Link,Brandchannel,`Subscribers(millions)`,Primarylanguage,Category,Country)
tab <- rename(tab, Subs = `Subscribers(millions)`)
tab <- as_tibble(tab)
hindi <- filter(tab,Primarylanguage == "Hindi")
hindi <- group_by(hindi, Category)
tab <- rename(tab, Subs = `Subscribers(millions)`)
library(tidyverse)
library(rvest)
library(dplyr)
html <- read_html("https://en.wikipedia.org/wiki/List_of_most-subscribed_YouTube_channels")
table <- html_table(html)
tab <- table[[1]]
lang <- tab$Primarylanguage
lang[2] = "Hindi"
lang[4] = "Hindi"
lang[9] = "Hindi"
lang[14] = "Hindi"
lang[5] = "English"
tab$Primarylanguage <- lang
tab =tab %>% select(Link,Brandchannel,`Subscribers(millions)`,Primarylanguage,Category,Country)
tab <- rename(tab, Subs = `Subscribers(millions)`)
tab <- as_tibble(tab)
hindi <- filter(tab,Primarylanguage == "Hindi")
hindi <- group_by(hindi, Category)
tab <- rename(tab, Subs = `Subscribers(millions)`)
rlang::last_trace()
iris <- data(iris)
dat <- data(iris)
dat
dat$Species
data("iris")
dat <- data("iris")
dat
head(iris)
dat <- iris
data("iris")
r = data("iris")
r
r[1]
r[[1]]
data("iris")
data("iris")
head(iris)
View(iris)
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
install.packages("ggplot2")
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
ggplot(iris, aes(x = Species, y = value, fill = Species)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free", nrow = 2) +
theme_minimal() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
ggplot(iris, aes(x = Species, y = value, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
rlang::last_trace()
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
#iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
# Create side-by-side boxplots using ggplot2
ggplot(iris_long, aes(x = Species, y = Sepal.length, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
#iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
# Create side-by-side boxplots using ggplot2
ggplot(iris, aes(x = Species, y = Sepal.length, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
#iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
# Create side-by-side boxplots using ggplot2
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
#iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
# Create side-by-side boxplots using ggplot2
ggplot(iris, aes(x = Species, y = c(Sepal.Length,Sepal.Width), fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
# Create side-by-side boxplots using ggplot2
ggplot(iris, aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
ggplot(iris, aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_boxplot()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
# Install and load ggplot2 if not already installed
# install.packages("ggplot2")
library(ggplot2)
# Reshape the data for ggplot2
#iris_long <- reshape2::melt(iris, id.vars = "Species", measure.vars = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"))
# Create side-by-side boxplots using ggplot2
ggplot(iris, aes(x = Species, y = Sepal.Width, fill = Species)) +
geom_boxplot() +
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
labs(title = "Boxplots of Continuous Variables Grouped by Species",
x = "Species", y = "Value")
shiny::runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
load("C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/Data/Cars_Data.RData")
runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
load("C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/Data/Cars_Data.RData")
shiny::runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
shiny::runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
shiny::runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
View(data)
shiny::runApp('C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/ShinyApp')
setwd("C:/Users/ashis/OneDrive/Desktop/MTH208/mth-208-course-project-group-18-1-main/Report")
View(data)
ggplot(data, aes(x = price_asnum, fill = brand)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Price by Brand",
x = "Price",
y = "Brand"
) +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = price_asnum, fill = brand)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Price by Brand",
x = "Price",
y = "Brand"
) +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed"
y = "Car-type"
library(ggplot2)
ggplot(data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
car_data
cars_data <- data
head(car_data)
library(ggplot2)
cars_data <- data
ggplot(data = cars_data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
# Load necessary libraries
library(rvest)
library(tidyverse)
# Example of web scraping code
html <- read_html("https://fastestlaps.com/lists/top-most-expensive-cars")
car_names <- html %>% html_elements(".table.table-striped a") %>% html_text()
car_links <- html %>% html_elements(".table.table-striped a") %>% html_attr("href")
# Display the first few car names and links
head(car_names)
head(car_links)
# Load necessary libraries
library(rvest)
library(tidyverse)
# Example of web scraping code
html <- read_html("https://fastestlaps.com/lists/top-most-expensive-cars")
car_names <- html %>% html_elements(".table.table-striped a") %>% html_text()
car_links <- html %>% html_elements(".table.table-striped a") %>% html_attr("href")
# Display the first few car names and links
head(car_names)
head(car_links)
# Example data cleaning steps
car_data <- tibble(name = car_names, link = car_links) %>%
filter(!is.na(name)) %>%
mutate(name = str_trim(name))
# Preview the cleaned dataset
head(car_data)
library(ggplot2)
cars_data <- data
ggplot(data = cars_data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
library(ggplot2)
cars_data <- data
ggplot(cars_data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
lwd
lwd()
load("../Data/Cars_Data.RData")
library(ggplot2)
load("../Data/Cars_Data.RData")
ggplot(data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
library(ggplot2)
load("../Data/Cars_Data.RData")
ggplot(data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
xlim(0,5)
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
xlim(0,5)+
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
xlim(0,5)+
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed") +
xlim(0,5)
# Load necessary libraries
library(rvest)
library(tidyverse)
# Example of web scraping code
html <- read_html("https://fastestlaps.com/lists/top-most-expensive-cars")
car_names <- html %>% html_elements(".table.table-striped a") %>% html_text()
car_links <- html %>% html_elements(".table.table-striped a") %>% html_attr("href")
# Display the first few car names and links
head(car_names)
head(car_links)
# Example data cleaning steps
car_data <- tibble(name = car_names, link = car_links) %>%
filter(!is.na(name)) %>%
mutate(name = str_trim(name))
# Preview the cleaned dataset
head(car_data)
library(ggplot2)
load("../Data/Cars_Data.RData")
ggplot(data, aes(x = top_speed, fill = car_type)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Top speed by Car-type",
x = "Top Speed",
y = "Car-type"
) +
theme_minimal()
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
xlim = c(0,5) +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = "red") +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed
)) +
geom_point(color = origin) +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed , colour = origin
)) +
geom_point() +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed , colour = weight
)) +
geom_point() +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed , colour = car_type
)) +
geom_point() +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = top_speed , colour = weight
)) +
geom_point() +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = max_acc, y = top_speed , colour = weight
)) +
geom_point() +
labs(title = "Price vs Top Speed",
x = "Price(Millions)",
y = "Top Speed")
ggplot(data, aes(x = price_asnum, y = max_acc , colour = weight
)) +
geom_point() +
labs(title = "Price vs Acceleration",
x = "",
y = "Acceleration")
ggplot(data, aes(x = price_asnum, y = max_acc , colour = weight
)) +
geom_point() +
labs(title = "Price vs Acceleration",
x = "Price",
y = "Acceleration")
